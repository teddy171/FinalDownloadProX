daemon off;
events {
  use epoll;
  accept_mutex on;
}

http {
  gzip on;
  gzip_comp_level 5;
  gzip_proxied any;
  gzip_types
    text/css
    text/javascript
    text/xml
    text/plain
    application/javascript
    application/x-javascript
    application/json
    image/x-icon;

  server_tokens off;

  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/gunicorn.sock fail_timeout=0;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 8000;
    
    root /usr/local/src/FinalDownloadProX/data;

    set $cors_disposition "";
    set $cors_type "";
 
    if ($request_filename ~* ^.*?\.(mp4|mkv|flv|mp3|webm|m4a)$) {
      set $cors_disposition attachment;
      set $cors_type application/octet-stream;
    }

    add_header Content-Disposition $cors_disposition;
    add_header Content-Type $cors_type;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }


}
